<?php

/**
 * @file
 * egnyte_careers_feed module file.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\taxonomy\Entity\Term;





/**
 * Implements hook_help().
 *
 * @inheritdoc
 */
function egnyte_careers_feed_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.egnyte_careers_feed':
      $text = file_get_contents(dirname(__FILE__) . "/README.md");
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}


/**
 * Implements hook_theme().
 * Lets us define our paragraphs templates in this module.
 */
function egnyte_careers_feed_theme($existing, $type, $theme, $path) {
  return [
    'paragraph__egnyte_careers_feed' => [
      'base hook' => 'paragraph',
    ],

    'paragraph__egnyte_careers_feed__item' => [
      'base hook' => 'paragraph',
    ],

  ];
}


function egnyte_careers_feed_preprocess_paragraph__egnyte_careers_feed__item(array &$variables) {
  $paragraph = $variables['elements']['#paragraph'];
  // UUID to pass for cache.
  $uuid = $variables['elements']['#paragraph']->uuid->value;
  
  if($paragraph->field_egnyte_careers_feed__itemc->target_id){
      $tid = $paragraph->field_egnyte_careers_feed__itemc->target_id;
      $category = Term::load($tid)->get('name')->value;
  }
  
  $variables['careers'] = _careers_feed($category,$uuid);
  $variables['category'] = $category;

}


function egnyte_careers_feed_preprocess_paragraph__egnyte_careers_feed(array &$variables) {
  $paragraph = $variables['elements']['#paragraph'];
}




function _careers_feed($category,$uuid){
  
  if ($cache = \Drupal::cache()->get('careers_feed--' . $uuid )) {
    return $cache->data;
  }
  else{

    $arr = array();
    $api = preg_replace("/\s+/", "%20", 'https://api.jobvite.com/api/v2/job?api=egnyte_jobfeed_api_key&sc=0def69f2df5ac3ff24e600d4c2ba00ab&jobStatus=Open&availableTo=external&category='. $category );
    $json = file_get_contents($api);

    $obj = json_decode($json);
    $counter = $obj->total > 5 ? 5 :  $obj->total;
    
    for ($x = 0; $x < $counter; $x++) {
      $arr[$x]['job_title'] = $obj->requisitions[$x]->title;
      $arr[$x]['job_description'] = limit_text( strip_tags($obj->requisitions[$x]->description), 50);
      $arr[$x]['job_description_link'] =  $obj->requisitions[$x]->detailLink;
      $arr[$x]['job_apply_link'] =  $obj->requisitions[$x]->applyLink;
      $arr[$x]['job_location'] = $obj->requisitions[$x]->location;
      $arr[$x]['job_location_city'] = $obj->requisitions[$x]->locationCity;
      $arr[$x]['job_location_state'] = $obj->requisitions[$x]->jobLocations[0]->state == '' ? '' : ', '. $obj->requisitions[$x]->jobLocations[0]->state ;
    }

    if ($arr) {
      \Drupal::cache()->set('careers_feed--' . $uuid, $arr, time() + 7200);
      return $arr;
    }
    else {
        return NULL;
    }
    
  }
  
  

  
  }