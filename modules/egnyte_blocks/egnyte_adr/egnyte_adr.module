<?php

/**
 * @file
 * egnyte_adr module file.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use \Drupal\file\Entity\File;





/**
 * Implements hook_help().
 *
 * @inheritdoc
 */
function egnyte_adr_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.egnyte_adr':
      $text = file_get_contents(dirname(__FILE__) . "/README.md");
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}

/**
 * Implements hook_theme().
 * Lets us define our paragraphs templates in this module.
 */
function egnyte_adr_theme($existing, $type, $theme, $path) {
  return [
    'paragraph__egnyte_adr' => [
      'base hook' => 'paragraph',
    ],

  ];
}

function egnyte_adr_preprocess_paragraph__egnyte_adr(array &$variables) {
  $paragraph = $variables['elements']['#paragraph'];
  $node_id =  $paragraph->field_egnyte_adr__resources->target_id;
  $node = $paragraph->field_egnyte_adr__resources->getValue();
//  var_dump($paragraph->field_egnyte_adr__resources->getValue()[0]['target_id']);
  $variables['resource_cards'] = _resource_cards($node);

}

function limit_text($text, $limit) {
  if (str_word_count($text, 0) > $limit) {
      $words = str_word_count($text, 2);
      $pos   = array_keys($words);
      $text  = substr($text, 0, $pos[$limit]) . '...';
  }
  return $text;
}

function _resource_cards($node){
    $arr=[];
    $arr1=[];
    if (!empty($node) ){
    foreach($node as $key => $value){
  //    var_dump($value['target_id']);
     $arr1['target_id'][$key] = $value['target_id'];
     $nodes = Node::loadMultiple($arr1['target_id']);
     // var_dump($nodes);
      foreach ($nodes as $num => $value){
        if (!empty($nodes)){
            $arr[$num]['title'] = $value->get('title')->value;
            $arr[$num] ['body']= limit_text(strip_tags($value->body->get(0)->value), 20);
            $arr[$num]['link']= $value->get('field_resource_center_url')->getValue();
            $tid= $value->get('field_resource_center_category')->getValue();
            $arr[$num]['tag'] = Term::load(51)->get('name')->value;
        

            if ($value->hasField('field_resource_center_image')) {
              $bkrd_image = $value->get('field_resource_center_image')->getValue();
              
               if ($bkrd_image && !empty($bkrd_image)) {
                  $entity = File::load($bkrd_image[0]['target_id']);
                  $arr[$num]['image_alt'] = $bkrd_image[0]['alt'] ;
                  $arr[$num]['image'] = file_create_url($entity->getFileUri());
              } 
            } 

            if ($value->hasField('field_resource_center_category')) {
                $resource_cat = $value->get('field_resource_center_category')->getValue();
              
               if ($resource_cat && !empty($resource_cat)) {
                  $entity = Term::load($resource_cat[0]['target_id']);
                  $arr[$num]['tag'] = $entity->get('name')->value;
              } 
            }
        }
      }
    }
  }
  return $arr;
}